/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : get-printer-dpi
 #	author : miyako
 #	2016/03/07
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- get-printer-dpi

		case 1 :
			PRINTER_DPI_LIST(pResult, pParams);
			break;

		case 2 :
			GET_PRINTER_DPI(pResult, pParams);
			break;

	}
}

// -------------------------------- get-printer-dpi -------------------------------

#if VERSIONMAC
NSPrinter *getPrinter (C_TEXT &printerName) {

	NSString *_printerName = printerName.copyUTF16String();
	NSPrinter *printer = [NSPrinter printerWithName:_printerName];
	[_printerName release];
	
	if (!printer) {
		printer =	[NSPrintInfo defaultPrinter];
	}

	return printer;
}

void getDPI(NSString *dpiString, double *dpi_w, double *dpi_h){

			NSRange r = [dpiString rangeOfString:@"x"];
			NSString *w, *h;

			if (r.length) {
				w = [dpiString substringWithRange:NSMakeRange(0, r.location)];
				h = [[dpiString substringWithRange:NSMakeRange(r.location + r.length, [dpiString length]
					- r.location - r.length)] stringByReplacingOccurrencesOfString:@"dpi" withString:@""];
				*dpi_w = [w doubleValue];
				*dpi_h = [h doubleValue];
				return;
			}
			*dpi_w = 0.0f;
			*dpi_h = 0.0f;
}
#endif

void PRINTER_DPI_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_REAL Param2;
	ARRAY_REAL Param3;
	C_TEXT Param4;

	Param1.fromParamAtIndex(pParams, 1);
	Param4.fromParamAtIndex(pParams, 4);

#if VERSIONMAC
	NSPrinter *printer = getPrinter(Param1);
	if (printer) {
		Param2.setSize(1);
		Param3.setSize(1);
		NSArray *resolutions = [printer stringListForKey:@"Resolution" inTable: @"PPD"];
		for (NSUInteger i = 0; i < [resolutions count]; ++i) {
			NSString *option = [@"Resolution/" stringByAppendingString:[resolutions objectAtIndex:i]];
			NSString *display = [printer stringForKey:option inTable: @"PPDOptionTranslation"];
			NSRange r = [display rangeOfString:@"x"];
			NSString *w, *h;
			if (r.length) {
				w = [display substringWithRange:NSMakeRange(0, r.location)];
				h = [[display substringWithRange:NSMakeRange(r.location + r.length, [display length]
					- r.location - r.length)] stringByReplacingOccurrencesOfString:@"dpi" withString:@""];
				Param2.appendDoubleValue([w doubleValue]);
				Param3.appendDoubleValue([h doubleValue]);
			}
		}
	}
#else
	CUTF16String printerName, portName;
	Param1.copyUTF16String(&printerName);
	if (Param4.getUTF16Length()) {
		Param4.copyUTF16String(&portName);
	} else {
		portName = CUTF16String((const PA_Unichar *)L"LPT1");
	}
	signed short count = DeviceCapabilities((LPCTSTR)printerName.c_str(), (LPCTSTR)portName.c_str(), DC_ENUMRESOLUTIONS, NULL, NULL);
	if(count <= 0) {
		DWORD size = 0;
		if(!GetDefaultPrinter(NULL, &size)) {
			size++;
            std::vector<wchar_t> buf(size);
            if(GetDefaultPrinter(&buf[0], &size)) {
                printerName = CUTF16String((const PA_Unichar *)&buf[0]);
                count = DeviceCapabilities((LPCTSTR)printerName.c_str(), (LPCTSTR)portName.c_str(), DC_ENUMRESOLUTIONS, NULL, NULL);
            }
		}
	}
	if(count >= 1) {
        size_t size = count * 2;
        std::vector<LONG> buf(size);
        DeviceCapabilities((LPCTSTR)printerName.c_str(), (LPCTSTR)portName.c_str(), DC_ENUMRESOLUTIONS,  (LPTSTR)&buf[0], NULL);
        Param2.setSize(1);
        Param3.setSize(1);
        for (size_t i = 0; i < buf.size(); ++i) {
            if ((i%2) == 0) {
                Param2.appendDoubleValue((double)buf.at(i));
            } else {
                Param3.appendDoubleValue((double)buf.at(i));
            }
        }	
	}

#endif

	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
}

void GET_PRINTER_DPI(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_REAL Param2;
	C_REAL Param3;
	C_TEXT Param4;

	Param1.fromParamAtIndex(pParams, 1);
	Param4.fromParamAtIndex(pParams, 4);

#if VERSIONMAC
	NSPrinter *printer = getPrinter(Param1);
	if (printer) {
		NSString *defaultResolution = [printer stringForKey:@"DefaultResolution" inTable:@"PPD"];
		double dpi_w, dpi_h;
		getDPI(defaultResolution, &dpi_w, &dpi_h);
		Param2.setDoubleValue(dpi_w);
		Param3.setDoubleValue(dpi_h);
	}
#else
	CUTF16String printerName;
	Param1.copyUTF16String(&printerName);
	bool created = false;
	HDC h = CreateDC(L"WINSPOOL", (LPTSTR)printerName.c_str(), NULL, NULL);
	if(!h) {
        DWORD size = 0;
        if(!GetDefaultPrinter(NULL, &size)) {
            size++;
            std::vector<wchar_t> buf(size);
            if(GetDefaultPrinter(&buf[0], &size)) {
                printerName = CUTF16String((const PA_Unichar *)&buf[0]);
                h = CreateDC(L"WINSPOOL", (LPTSTR)printerName.c_str(), NULL, NULL);
            }
        }
    }
	if(h) {
		double dpi_w, dpi_h;
		dpi_w = GetDeviceCaps(h,LOGPIXELSX);
		dpi_h = GetDeviceCaps(h,LOGPIXELSY);
		Param2.setDoubleValue(dpi_w);
		Param3.setDoubleValue(dpi_h);
        DeleteDC(h);
        h = NULL;
	}
#endif
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
}

